% in this file, a WR12-waveguide will be constructed in CST by MATLAB,
% you can use this single file to build the waveguide in CST without any other functions needed,
% of cource, in order to use MATLAB to control CST more conveniently, we can define some basical functions in MATLAB,
% however, for this simple model, we do not need such a complex methods,
% this single MATLAB code can help you understand the primary pricinple of MATLAB-CST API.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% codes below are used to active your CST software, including the studio which you will use,
% the path and the name of CST project you are creating are also can be set in the codes below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cst = actxserver('CSTStudio.application');
mws = invoke(cst, 'NewMWS');
app = invoke(mws, 'GetApplicationName');
ver = invoke(mws, 'GetApplicationVersion');
invoke(mws, 'FileNew');
path = 'E:\CST workplace';
filename = '\chenny.cst';
fullname = [path, filename];
invoke(mws, 'SaveAs', fullname, 'True');

% the codes below are used to set the UNITS in CST file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
units = invoke(mws, 'Units');
invoke(units, 'Geometry', 'mm');
invoke(units, 'Frequency', 'GHz');
invoke(units, 'Time', 'ns');
invoke(units, 'TemperatureUnit', 'Kelvin');
invoke(units, 'Voltage', 'V');
invoke(units, 'Current', 'A');
invoke(units, 'Resistance', 'Ohm');
invoke(units, 'Conductance', 'Siemens');
invoke(units, 'Capacitance', 'PikoF');
invoke(units, 'Inductance', 'NanoH');
release(units);

% you can define the frequency range in this part
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
freqMin = 60;
freqMax = 70;
freq = invoke(mws, 'Solver');
invoke(freq, 'FrequencyRange', int2str(freqMin), int2str(freqMax));

% the size of the wavetube(WR12) can be defined
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
width = 3.1;
height = 1.5;
L = 10;
brick = invoke(mws, 'Brick');
invoke(brick, 'Reset');
invoke(brick, 'Name', 'brick');
invoke(brick, 'Component', 'component1');
invoke(brick, 'Material', 'Vacuum');
invoke(brick, 'Xrange', int2str(-width / 2), int2str(width / 2));
invoke(brick, 'Yrange', int2str(-height / 2), int2str(height / 2));
invoke(brick, 'Zrange', int2str(-L / 2), int2str(L / 2));
invoke(brick, 'Create');
release(brick);

% first, you should pick the face of the wavetube
% be noted that the face is indexed by number. If different number is chosen, the different face will be picked
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pick = invoke(mws, 'Pick');
invoke(pick, 'PickFaceFromId', 'component1:brick', '1');
release(pick);

% after picking the face, the port where microwave will transmit can be defined
% some relevant parameters can be seen in this part
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
port = invoke(mws, 'Port');
invoke(port, 'Reset');
invoke(port, 'PortNumber', '1');
invoke(port, 'Label', '');
invoke(port, 'Folder', '');
invoke(port, 'NumberOfModes', '1');
invoke(port, 'AdjustPolarization', 'False');
invoke(port, 'PolarizationAngle', '0');
invoke(port, 'ReferencePlaneDistance', '0');
invoke(port, 'TextSize', '50');
invoke(port, 'TextMaxLimit', '0');
invoke(port, 'Coordinates', 'Picks');
invoke(port, 'Orientation', 'positive');
invoke(port, 'PortOnBound', 'True');
invoke(port, 'ClipPickedPortToBound', 'False');
invoke(port, 'Xrange', int2str(-width / 2), int2str(width / 2));
invoke(port, 'Yrange', int2str(-height / 2), int2str(height / 2));
invoke(port, 'Zrange', int2str(L), int2str(L));
invoke(port, 'XrangeAdd', '0', '0');
invoke(port, 'YrangeAdd', '0', '0');
invoke(port, 'ZrangeAdd', '0', '0');
invoke(port, 'SingleEnded', 'False');
invoke(port, 'WaveguideMonitor', 'False');
invoke(port, 'Create');
release(port);

% pick another face and set to be the export.
pick = invoke(mws, 'Pick');
invoke(pick, 'PickFaceFromId', 'component1:brick', '2');
release(pick);

port = invoke(mws, 'Port');
invoke(port, 'Reset');
invoke(port, 'PortNumber', '2');
invoke(port, 'Label', '');
invoke(port, 'Folder', '');
invoke(port, 'NumberOfModes', '1');
invoke(port, 'AdjustPolarization', 'False');
invoke(port, 'PolarizationAngle', '0');
invoke(port, 'ReferencePlaneDistance', '0');
invoke(port, 'TextSize', '50');
invoke(port, 'TextMaxLimit', '0');
invoke(port, 'Coordinates', 'Picks');
invoke(port, 'Orientation', 'positive');
invoke(port, 'PortOnBound', 'True');
invoke(port, 'ClipPickedPortToBound', 'False');
invoke(port, 'Xrange', int2str(-width / 2), int2str(width / 2));
invoke(port, 'Yrange', int2str(-height / 2), int2str(height / 2));
invoke(port, 'Zrange', int2str(-L), int2str(-L));
invoke(port, 'XrangeAdd', '0', '0');
invoke(port, 'YrangeAdd', '0', '0');
invoke(port, 'ZrangeAdd', '0', '0');
invoke(port, 'SingleEnded', 'False');
invoke(port, 'WaveguideMonitor', 'False');
invoke(port, 'Create');
release(port);

excitation = invoke(mws, 'TimeSignal');
invoke(excitation, 'Reset');
invoke(excitation, 'Name', 'signal1');
invoke(excitation, 'SignalType', 'Gaussian');
invoke(excitation, 'ProblemType', 'High Frequency');
invoke(excitation, 'Fmin', int2str(freqMin));
invoke(excitation, 'Fmax', int2str(freqMax));
invoke(excitation, 'Create');
release(excitation);

boundary = invoke(mws, 'Boundary');
invoke(boundary, 'Xmin', 'electric');
invoke(boundary, 'Xmax', 'electric');
invoke(boundary, 'Ymin', 'electric');
invoke(boundary, 'Ymax', 'electric');
invoke(boundary, 'Zmin', 'expanded open');
invoke(boundary, 'Zmax', 'expanded open');
invoke(boundary, 'Xsymmetry', 'none');
invoke(boundary, 'Ysymmetry', 'none');
invoke(boundary, 'Zsymmetry', 'none');
invoke(boundary, 'ApplyInAllDirections', 'False');
release(boundary);

monitor = invoke(mws, 'Monitor');
invoke(monitor, 'Reset');
invoke(monitor, 'Name', 'e-field(f=65)');
invoke(monitor, 'Dimension', 'Volume');
invoke(monitor, 'Domain', 'Frequency');
invoke(monitor, 'FieldType', 'Efield');
invoke(monitor, 'MonitorValue', '65');
invoke(monitor, 'UseSubvolume', 'False');
invoke(monitor, 'Coordinates', 'Structure');
invoke(monitor, 'SetSubvolume', '-2', '2', '-1', '1', '-5', '5');
invoke(monitor, 'SetSubvolumeOffset', '0', '0', '0', '0', '0', '0');
invoke(monitor, 'Create');
release(monitor);

solver = invoke(mws, 'Solver');
invoke(solver, 'Method', 'Hexahedral');
invoke(solver, 'CalculationType', 'TD-S');
invoke(solver, 'StimulationPort', '1');
invoke(solver, 'StimulationMode', '1');
invoke(solver, 'SteadyStateLimit', '-20');
invoke(solver, 'MeshAdaption', 'False');
invoke(solver, 'CalculateModesOnly', 'False');
invoke(solver, 'SParaSymmetry', 'False');
invoke(solver, 'StoreTDResultsInCache', 'False');
invoke(solver, 'FullDeembedding', 'False');
invoke(solver, 'SuperimposePLWExcitation', 'False');
invoke(solver, 'UseSensitivityAnalysis', 'False');
invoke(solver, 'Start');
